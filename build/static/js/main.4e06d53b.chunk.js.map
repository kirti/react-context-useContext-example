{"version":3,"sources":["lang-context.js","User.js","theme-context.js","ThemedText.js","App.js","reportWebVitals.js","index.js"],"names":["LangContext","React","createContext","titleLbl","firstNameLbl","lastNameLbl","addressLbl","User","Consumer","lang","namelbl","titlelbl","ThemeContext","padding","background","ThemedText","props","theme","style","backgroundColor","children","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAiBeA,G,UAAcC,IAAMC,cAd3B,CACAC,SAAU,8BACVC,aAAc,eACdC,YAAY,eACZC,WAAW,gB,OCMJC,MAXf,WACE,OACC,cAACP,EAAYQ,SAAb,UACQ,SAAAC,GACG,OAAO,qCAAGA,EAAKC,QAAR,IAAkBD,EAAKE,gBCO7BC,EAAeX,IAAMC,cAN1B,CACNW,QAAS,OACPC,WAAY,YCYHC,MAlBf,SAAoBC,GAClB,OACI,cAACJ,EAAaJ,SAAd,UACG,SAAAS,GAAK,OACL,oBAAIC,MACG,CAAEC,gBAAiBF,EAAMH,WACxBD,QAAQI,EAAMJ,SAFtB,SAMEG,EAAMI,eCCFC,MAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UACO,qHACD,cAAC,EAAD,kDACH,cAAC,EAAD,QCGQC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.4e06d53b.chunk.js","sourcesContent":["import React from 'react';\n\nexport const languages = {\n    en: {\n        titleLbl: 'Please enter below details ',\n        firstNameLbl: 'First Name :',\n        lastNameLbl:'Last Name : ',\n        addressLbl:'Address : '\n    },\n    fr: {\n        titlelbl    : 'Please enter below details ',\n        firstNameLbl: 'First Name :',\n        lastNameLbl:'Last Name : ',\n        addressLbl:'Address : '\n    },\n  };\n\n  export const LangContext = React.createContext(\n    languages.en // default value\n  );","import { LangContext  } from './lang-context';\n\nfunction User() {\n  return (\n   <LangContext.Consumer>\n          {lang => {\n              return <>{lang.namelbl} {lang.titlelbl}</>\n          \n          }}\n    </LangContext.Consumer>\n  );\n}\n\nexport default User;\n","import React from 'react';\nexport const themes = {\n\n    light: {\n      padding: '10px',\n      background: '#ccc',\n    },\n    dark: {\n    padding: '10px',\n      background: '#cecece',\n    },\n  };\n\n  export const ThemeContext = React.createContext(\n    themes.dark // default value\n  );","\nimport { ThemeContext } from './theme-context';\n\nfunction ThemedText(props) {\n  return (\n      <ThemeContext.Consumer>\n        {theme => (\n         <h2 style={\n                { backgroundColor: theme.background ,\n                 padding:theme.padding\n                }\n           }\n         > \n          {props.children}\n        </h2>\n   \n      )}\n       </ThemeContext.Consumer>\n  );\n}\n\nexport default ThemedText;\n","import './App.css';\nimport User from './User'\nimport ThemedText  from './ThemedText';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n           <h1>How to Use and Implement Context and useContext Hook with example React'sÂ Hooks </h1>\n          <ThemedText>Text display with theme as context </ThemedText>\n       <User/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}